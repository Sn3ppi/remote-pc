import sys
import os
import subprocess
import platform
import pyautogui
import datetime
from . import stats

CACHE_PATH = os.path.dirname(f"./cache/tg_users/")

async def create_dir(path): 
    if not os.path.exists(CACHE_PATH):
        os.makedirs(CACHE_PATH)
    user_path = os.path.join(CACHE_PATH, path) 
    if not os.path.exists(user_path):                
        os.makedirs(user_path)
    return user_path

async def delete_path(path): 
    user_path = os.path.join(CACHE_PATH, path) 
    if os.path.exists(user_path): 
        if os.path.isfile(user_path): 
            os.remove(user_path) 
            dirname = os.path.dirname(user_path)
            if len(os.listdir(dirname)) == 0:
                os.rmdir(dirname)
        if os.path.isdir(user_path): 
            if len(os.listdir(user_path)) == 0: 
                os.rmdir(user_path) 

async def write_note(user, text):
    user_dir = await create_dir(str(user)) 
    try:
        f = open(f'{user_dir}/tmp_{user}.txt', 'a') 
        f.write(f"{text} ")
        f.close() 
        return True 
    except UnicodeEncodeError:
        await stats.log(f"{user}, Ошибка декодирования при добавлении заметки: неизвестный символ!")
        return False

async def name_note(user, text):
    default_name = os.path.join(CACHE_PATH, f'{user}/tmp_{user}.txt')
    new_name = os.path.join(CACHE_PATH, f'{user}/{text}.txt')
    try:
        os.rename(default_name, new_name)
        await stats.log(f"{user} создал заметку.")
        return True
    except FileExistsError:
        await stats.log(f"{user}, Ошибка во время переименовывания заметки: заметка с таким названием уже существует!")
        return False
    except FileNotFoundError:
        await stats.log(f"{user}, Ошибка во время переименовывания заметки: заметка отсутствует!")
        return False
    except OSError:
        await stats.log(f"{user}, Ошибка во время переименовывания заметки: название содержит запрещённые в системе символы.")
        return False
    except UnicodeEncodeError: 
        await stats.log(f"{user}, Ошибка во время переименовывания заметки: название содержит неизвестные символы, либо файл ещё не был создан.")
        return False
    except Exception as e:    
        await stats.log(f"{user}, Ошибка во время переименовывания заметки: {e}")
        return False

async def reload(user): 
    await stats.log(f"UPTIME: {await stats.get_uptime()}. Машина перезагружена пользователем {user}.")
    if platform.uname()[0] == 'Windows':
        subprocess.Popen("cmd /k shutdown /r /t 1")
    if platform.uname()[0] == 'Linux':
        subprocess.Popen(["systemctl reboot"],shell=True)

async def poweroff(user): 
    await stats.log(f'UPTIME: {await stats.get_uptime()}. Машина перезагружена пользователем {user}.')
    if platform.uname()[0] == 'Windows':
        subprocess.Popen("cmd /k shutdown /f /p")
    if platform.uname()[0] == 'Linux':
        subprocess.Popen(["systemctl poweroff"],shell=True)

async def screenshot(path): 
    now = datetime.datetime.now()
    current_time = now.strftime("%d_%m_%Y_%H_%M_%S")
    user_path = os.path.join(CACHE_PATH, path)
    if await create_dir(path):
        file = f'{user_path}/screenshot_{current_time}.png'
        try:
            screen = pyautogui.screenshot(file)
            return file
        except Exception as e:
            await stats.log(e)
            return False

async def bot_off(user):
    await stats.log(f'Бот выключен пользователем {user}.')
    sys.exit()