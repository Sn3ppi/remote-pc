from . import settings
import os
import platform
import psutil
import asyncio
import math
import time
import datetime
from aiotestspeed.aio import Speedtest
import json
import threading

SCRIPT_PATH = os.path.join(os.path.dirname(__file__))
CACHE_PATH = os.path.dirname("./cache/bot/") 
stats_json = os.path.join(CACHE_PATH, 'stats.json') 

async def stats_file_exists(): 
    if not os.path.exists(CACHE_PATH):
        os.makedirs(CACHE_PATH)
    if not os.path.exists(stats_json):
        await json_stats_creator()
    return True
    
async def get_time():
    now = datetime.datetime.now()
    current_time = now.strftime("%a %d %b %Y %H:%M:%S")
    return current_time
    
async def get_temperature(): 
    info = {}
    if platform.uname()[0] == 'Windows':
        import pythoncom
        pythoncom.CoInitialize()
        import wmi
        w = wmi.WMI(namespace="")
        import clr # import pythonnet 
        clr.AddReference(os.path.join(SCRIPT_PATH, 'OpenHardwareMonitorLib.dll')) # –ø—É—Ç—å –¥–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        from OpenHardwareMonitor.Hardware import Computer
        c = Computer()
        c.CPUEnabled = True
        c.GPUEnabled = True
        c.Open()
        for x, device in enumerate(c.Hardware): 
            for a in range(0, len(c.Hardware[x].Sensors)): 
                device_name = c.Hardware[x].Sensors[a].Name
                sensor_value = c.Hardware[x].Sensors[a].get_Value()
                if device_name == "CPU Package":
                    sensor = "CPU"
                if device_name == "GPU Core":
                    sensor = "GPU"
                try: 
                    if "/temperature" in str(c.Hardware[x].Sensors[a].Identifier):
                        if device_name in ["CPU Package", "GPU Core"]: 
                            info[f'{device_name.replace(f"{device_name}", sensor)}'] = f'{round(sensor_value, 1) if sensor_value else "None"}'
                            c.Hardware[x].Update()       
                except Exception as e:
                    info[f'{device_name.replace(f"{device_name}", sensor)}'] = f'{round(sensor_value, 1) if sensor_value else "None"}'
                    await log(e)
                    continue
        pythoncom.CoUninitialize()
    if platform.uname()[0] == 'Linux':
        import re
        payload = psutil.sensors_temperatures()
        for entities in payload:
            for entity in payload[str(entities)]:
                device_name = entity[0]
                if device_name == "Package id 0":
                    sensor = "CPU"
                if device_name == "edge":
                    sensor = "GPU"
                try:
                    if device_name in [f"Package id 0", "edge"]:  
                        info[f'{device_name.replace(f"{device_name}", sensor)}'] = f'{entity[1] if entity[1] != None else "--"}'  
                except Exception as e:
                    info[f'{device_name.replace(f"{device_name}", sensor)}'] = f'{entity[1] if entity[1] != None else "--"}'
                    await log(e)
                    continue
    return info

async def get_memory(): 
    disks = {}
    for part in psutil.disk_partitions(): 
        disk = psutil.disk_usage(part.mountpoint)
        part_name = part.device.replace('\\','')
        disks[f"{part_name}"] = {}
        try:
            disks[f"{part_name}"]["total"] = f'{await bytes_to_unit_name((disk[0]))}'
            disks[f"{part_name}"]["free"] = f'{await bytes_to_unit_name((disk[0]-disk[1]))}'
            disks[f"{part_name}"]["percent"] = f'{100-disk[3]} %'
        except Exception as e:
            disks[f"{part_name}"] = f'{e}'
            await log(e)
            continue
    return disks

async def get_network_speed(): 
    value = {}
    while True:
        try:
            s: Speedtest = await Speedtest()
            value["last_update"] = f'{await get_time()}'
            value["download"] = f'{await bytes_to_unit_name(await s.download())}'
            value["upload"] = f'{await bytes_to_unit_name(await s.upload())}'
            break
        except Exception as e:
            await log(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü—ã—Ç–∞—é—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É...")
            await asyncio.sleep(60)
            await get_network_speed()
    return value

async def get_ram():
    value = {}
    value["total"] = f'{await bytes_to_unit_name(psutil.virtual_memory()[0])}'
    value["free"] = f'{await bytes_to_unit_name(psutil.virtual_memory()[1])}'
    value["percent"] = f'{100-psutil.virtual_memory()[2]} %'
    return value


async def bytes_to_unit_name(memory): 
    unities = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"]
    for i in reversed(range(len(unities))):
        if memory >= 1024 ** i:
            return f"{memory/1024**i:.2f} {unities[i]}"
       
async def get_uptime(): 
    value = datetime.timedelta(seconds = math.floor(time.time() - psutil.boot_time()))
    return value

def get_update_frequency(sensor): 
    config = settings.json_config_parse()
    display = ""
    auto_update = config["script_options"][sensor] 
    if auto_update not in ["False", "0", "None"]: 
        display += f"—Ä–∞–∑ –≤ {int(auto_update)} –º–∏–Ω." 
    else:
        display += "–≤—ã–∫–ª."
    return display

async def log(e): 
    print(f"[{await get_time()}]: {e}\n")
    if await stats_file_exists():
        config = settings.json_config_parse()
        if config["script_options"]["log_available"]:
            f = open(os.path.join(CACHE_PATH, 'log.txt'), 'a')
            f.write(f"[{await get_time()}]: {e}\n")
            f.close()

async def json_stats_creator():
    sensors_data = {}
    sensors_data["sensors"] = {}
    sensors_data["sensors"]["last_update"] = {}
    sensors_data["sensors"]["os"] = {}
    sensors_data["sensors"]["temperatures"] = {}
    sensors_data["sensors"]["cpu_load"] = {}
    sensors_data["sensors"]["memory"] = {}
    sensors_data["sensors"]["ram"] = {}
    sensors_data["sensors"]["uptime"] = {}
    sensors_data["network"] = {}
    with open(stats_json, 'w') as stats:
        json.dump(sensors_data, stats, sort_keys=True, indent=4)  

async def json_sensors(): 
    if await stats_file_exists():
        with open(stats_json, 'r') as stats:
            sensors_data = json.load(stats)
        sensors_data["sensors"]["last_update"] = await get_time()
        sensors_data["sensors"]["os"] = platform.platform()
        sensors_data["sensors"]["temperatures"] = await get_temperature()  
        sensors_data["sensors"]["cpu_load"] = round(psutil.cpu_percent(), 1)                            
        sensors_data["sensors"]["memory"] = await get_memory()
        sensors_data["sensors"]["ram"] = await get_ram()
        sensors_data["sensors"]["uptime"] = str(await get_uptime())
        with open(stats_json, 'w') as stats:
            json.dump(sensors_data, stats, sort_keys=True, indent=4)        

async def json_network(): 
    if await stats_file_exists():
        with open(stats_json, 'r') as stats:
            network_data = json.load(stats)
        network_data["network"] = await get_network_speed()
        with open(stats_json, 'w') as stats:
            json.dump(network_data, stats, sort_keys=True, indent=4)

async def json_sensors_parser():
    if await stats_file_exists():
        info = ""
        try:
            with open(stats_json, 'r') as stats:
                sensors_data = json.load(stats)
            last_update = sensors_data["sensors"]["last_update"]
            operating_system = sensors_data["sensors"]["os"]
            temperatures = ""
            cpu_load = sensors_data["sensors"]["cpu_load"]
            for device in sensors_data["sensors"]["temperatures"]:
                value = sensors_data["sensors"]["temperatures"][device]
                temperatures += f"{device}: {value} ¬∞C\n"
            disks = ""
            for partition in sensors_data["sensors"]["memory"]:
                free_mem = sensors_data["sensors"]["memory"][partition]["free"]
                total_mem = sensors_data["sensors"]["memory"][partition]["total"]
                percent_mem = sensors_data["sensors"]["memory"][partition]["percent"]
                disks += f'{partition} {free_mem} / {total_mem} ({percent_mem})\n'
            free_ram = sensors_data["sensors"]["ram"]["free"]
            total_ram = sensors_data["sensors"]["ram"]["total"]
            percent_ram = sensors_data["sensors"]["ram"]["percent"]
            ram = f"{free_ram} / {total_ram} ({percent_ram})"
            uptime = sensors_data["sensors"]["uptime"]
            info += f"""
üïë –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è): 
{last_update}

üñ• –¢–µ–∫—É—â–∞—è –û–°: 
{operating_system}

üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:

{temperatures}
üèé –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {cpu_load} %
        
üìÄ –û–±—ä—ë–º —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏ –Ω–∞ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö:
{disks}
–û–ó–£: —Å–≤–æ–±–æ–¥–Ω–æ {ram}

‚è≥ UPTIME: {uptime}

–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {get_update_frequency(sensor="sys_autoupdate")}"""
        except Exception as e:
            info += f"–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏—Å—Ç–µ–º–µ. –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ."
            await log(e)
    return info

async def json_network_parser():
    info = ""
    if await stats_file_exists():
        try:
            with open(stats_json, 'r') as stats:
                network_data = json.load(stats)
            last_update = network_data["network"]["last_update"]
            download = network_data["network"]["download"]
            upload = network_data["network"]["upload"]
            info += f"""
–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è): {last_update}
‚¨ÜÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: {download}
‚¨áÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏: {upload}

–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {get_update_frequency(sensor="net_autoupdate")}"""
        except Exception as e:
            info += f"–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏. –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ."
            await log(info)
    return info

async def manual_sys_update(): 
    sys_update = threading.Thread(target=asyncio.run, daemon=True, name='machine.sys_update', args=(json_sensors(),)) 
    sys_update.start()
    while sys_update.is_alive():
        await asyncio.sleep(0.1)

async def manual_net_update(): 
    net_update = threading.Thread(target=asyncio.run, daemon=True, name='machine.net_update', args=(json_network(),))
    net_update.start()
    while net_update.is_alive():
        await asyncio.sleep(0.1)

async def sys_auto_update(): 
    config = settings.json_config_parse()
    sys_update = config["script_options"]["sys_autoupdate"]
    while sys_update != "False":
        await json_sensors()
        await asyncio.sleep(float(sys_update)*60)
     
async def net_auto_update(): 
    config = settings.json_config_parse()
    net_update = config["script_options"]["net_autoupdate"]
    while net_update != "False":
        await json_network()
        await asyncio.sleep(float(net_update)*60)

def info_auto_update(): 
    config = settings.json_config_parse()
    try:
        if config["script_options"]["sys_autoupdate"] not in ["False", "0", "None"]:
            sys_update = threading.Thread(target=asyncio.run, daemon=True, name='sys_auto_update', args=(sys_auto_update(),))
            sys_update.start()
        if config["script_options"]["net_autoupdate"] not in ["False", "0", "None"]:
            net_update = threading.Thread(target=asyncio.run, daemon=True, name='net_auto_update', args=(net_auto_update(),))
            net_update.start()
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e} –ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã...")
        sys_update.join()
        net_update.join()


    










