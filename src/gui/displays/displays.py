'''–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞.'''

import datetime
import json

from gui.displays.constructors import Display
from utils.bytes_to_unit_name import bytes_to_unit_name
from utils.manystring import ManyString

__all__ = [
    'MenuDisplay',
    'MenuSysDisplay',
    'MenuNetDisplay',
    'MenuProgsDisplay',
    'MenuOptsDisplay',
    'MenuOptsMachineDisplay',
    'MenuOptsMachineSysDisplay',
    'MenuOptsMachineNetDisplay',
    'MenuOptsBotDisplay',
    'MenuOptsAccessDisplay',
    'MenuEtcDisplay',
    'MenuEtcNoteDisplay',
    'MenuEtcNoteNameDisplay',
    'MenuAboutDisplay'
]

class MenuDisplay(Display):
    def __init__(self) -> None:
        super().__init__()
        self.set_header("menu")
        self.set_description("‚ÑπÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        

class MenuSysDisplay(Display):
    def __init__(self, data: str) -> None:
        super().__init__()
        self.set_header("menu.sys")
        d = ManyString()
        
        data = json.loads(data)
        last_update = None if data[0] is None else datetime.datetime.fromtimestamp(data[0])
        cpu_load = None if data[1] is None else f"{data[1]:.1f}"
        cpu_temperature = None if data[2] is None else f"{data[2]:.1f}"
        gpu_temperature = None if data[3] is None else f"{data[3]:.1f}"
        disks = None if data[4] is None else json.loads(data[4])
        free_ram = None if data[5] is None else bytes_to_unit_name(data[5])
        total_ram = None if data[6] is None else bytes_to_unit_name(data[6])
        percent_ram = None if data[7] is None else f"{data[7]:.2f}"
        uptime = None if data[8] is None else datetime.timedelta(seconds=int(f"{data[8]:.0f}"))
        
        d.enter(f"üïë –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è):")
        d.enter(f"{last_update}")
        d.enter(f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:", space=2)
        d.enter(f"CPU: {cpu_temperature} ¬∞C")
        d.enter(f"GPU: {gpu_temperature} ¬∞C")
        d.enter(f"üèé –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {cpu_load} %", space=2)
        
        if disks is not None:
            d.enter(f"üìÄ –û–±—ä—ë–º —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏ –Ω–∞ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö:", space=2)
            for disk in disks:
                dev_name = disk
                free_mem = bytes_to_unit_name(disks[disk]["free"])
                total_mem = bytes_to_unit_name(disks[disk]["total"])
                percent_mem = f'{disks[disk]["percent"]:.2f}'
                d.enter(f'{dev_name} {free_mem} / {total_mem} ({percent_mem} %)')
            
        d.enter(f"RAM: {free_ram} / {total_ram} ({percent_ram} %)", space=2)
        d.enter(f"‚è≥ UPTIME: {uptime}", space=2)
        self.set_description(str(d))
        
        
class MenuNetDisplay(Display):
    def __init__(self, data: dict) -> None:
        super().__init__()
        self.set_header("menu.net")
        d = ManyString()
        
        data = json.loads(data)
        last_update = None if data[0] is None else datetime.datetime.fromtimestamp(data[0])
        download_speed = None if data[1] is None else bytes_to_unit_name(data[1])
        upload_speed = None if data[2] is None else bytes_to_unit_name(data[2])
    
        d.enter(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è):")
        d.enter(f"{last_update}")
        d.enter(f"‚¨ÜÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: {download_speed}", space=2)
        d.enter(f"‚¨áÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏: {upload_speed}")
        self.set_description(str(d))
        
        
class MenuProgsDisplay(Display):
    def __init__(self) -> None:
        super().__init__()
        self.set_header("menu.progs")
        self.set_description("‚ÑπÔ∏è –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–∞–º –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º.")
        

class MenuOptsDisplay(Display):
    def __init__(self) -> None:
        super().__init__()
        self.set_header("menu.opts")
        self.set_description("‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:")
        
        
class MenuOptsMachineDisplay(Display):
    def __init__(self) -> None:
        super().__init__()
        self.set_header("menu.opts.machine")
        self.set_description("‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.")
        
        
class MenuOptsMachineSysDisplay(Display):
    def __init__(self) -> None:
        super().__init__()
        self.set_header("menu.opts.machine.sys")
        self.set_description("‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏—Å—Ç–µ–º–µ.")
        

class MenuOptsMachineNetDisplay(Display):
    def __init__(self) -> None:
        super().__init__()
        self.set_header("menu.opts.machine.net")
        self.set_description("‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏.")
        

class MenuOptsBotDisplay(Display):
    def __init__(self) -> None:
        super().__init__()
        self.set_header("menu.opts.bot")
        d = ManyString()
        d.enter("‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.")
        self.set_description(str(d))

        
class MenuOptsAccessDisplay(Display):
    def __init__(self) -> None:
        super().__init__()
        self.set_header("menu.opts.access")
        d = ManyString()
        d.enter("‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        d.enter("‚ÑπÔ∏è –£—Ä–æ–≤–µ–Ω—å 0: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
        d.enter("‚ÑπÔ∏è –£—Ä–æ–≤–µ–Ω—å 1: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.")
        d.enter("‚ÑπÔ∏è –£—Ä–æ–≤–µ–Ω—å 2: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∫–æ–º–∞–Ω–¥–æ–π /id.")
        d.enter("‚ÑπÔ∏è /id - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID.")
        d.enter("‚ÑπÔ∏è –£—Ä–æ–≤–µ–Ω—å 3: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞, –Ω–æ –æ–Ω –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø—É—Å–∫–µ.")
        d.enter("‚ÑπÔ∏è –£—Ä–æ–≤–µ–Ω—å 4: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞, –∞ —Ç–∞–∫–∂–µ –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ.")
        self.set_description(str(d))
        
        
class MenuEtcDisplay(Display):
    def __init__(self) -> None:
        super().__init__()
        self.set_header("menu.etc")
        self.set_description("‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π:")
        
        
class MenuEtcNoteDisplay(Display):
    def __init__(self) -> None:
        super().__init__()
        self.set_header("menu.etc.note")
        d = ManyString()
        d.enter("[1/2] –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É.")
        d.enter('‚ÑπÔ∏è –ö–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏, –Ω–∞–∂–º–∏—Ç–µ "üÜó –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å".')
        self.set_description(str(d))
        
        
class MenuEtcNoteNameDisplay(Display):
    def __init__(self) -> None:
        super().__init__()
        self.set_header("menu.etc.note.name")
        d = ManyString()
        d.enter("[2/2] –ù–∞–∑–æ–≤–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É.")
        d.enter('–ù–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ –í—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–º–µ—Ç–∫—É.')
        self.set_description(str(d))
        
        
class MenuAboutDisplay(Display):
    def __init__(self) -> None:
        super().__init__()
        self.set_header("menu.about")
        self.set_description("‚ÑπÔ∏è –ê–≤—Ç–æ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞.")